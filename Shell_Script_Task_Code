DATE=$(date +%F)  
PROCESS_LOG="process_log_$DATE.log"
HIGH_MEM_LOG="high_mem_processes.log"
MEM_THRESHOLD=30.0
DISK_THRESHOLD=80
ROOT_PART="/"
echo "üõ°Ô∏è  System Health Check - $DATE"
echo "---------------------------------------"

echo "[1] Now Saving list of running processes to '$PROCESS_LOG'..."
ps -eo pid,ppid,user,%mem,%cpu,cmd --sort=-%mem > "$PROCESS_LOG"

echo "[2] Scanning for processes consuming over ${MEM_THRESHOLD}% memory..."
HIGH_MEM_PROCESSES=$(awk -v threshold="$MEM_THRESHOLD" 'NR>1 && $4 > threshold' "$PROCESS_LOG")
HIGH_MEM_COUNT=$(echo "$HIGH_MEM_PROCESSES" | grep -c .)

if (( HIGH_MEM_COUNT > 0 )); then
    echo "‚ö†Ô∏è  Found $HIGH_MEM_COUNT process(es) exceeding ${MEM_THRESHOLD}% memory usage."
    {
        echo "[$DATE] High memory usage detected:"
        echo "$HIGH_MEM_PROCESSES"
        echo "---------------------------------------"
    } >> "$HIGH_MEM_LOG"
else
    echo "‚úÖ No high memory usage processes found."
fi

DISK_USAGE=$(df --output=pcent "$ROOT_PART" | tail -1 | tr -dc '0-9')
echo "[3] Checking disk usage for '$ROOT_PART' partition: ${DISK_USAGE}% used"
if (( DISK_USAGE > DISK_THRESHOLD )); then
    echo "‚ö†Ô∏è  Disk usage is above ${DISK_THRESHOLD}%!"
else
    echo "‚úÖ Disk usage is within safe limits."
fi

TOTAL_PROCESSES=$(( $(wc -l < "$PROCESS_LOG") - 1 ))  
echo ""
echo "========= ‚úÖ System Health Summary ========="
echo "Total running processes       : $TOTAL_PROCESSES"
echo "High memory usage processes   : $HIGH_MEM_COUNT"
echo "Disk usage on '/' partition   : ${DISK_USAGE}%"
echo "============================================"
